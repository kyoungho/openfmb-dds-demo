##/* $Id$
##
##   (c) Copyright, Real-Time Innovations, Inc. 2015.  All rights reserved.
##   No duplications, whole or partial, manual or electronic, may be made
##   without prior written permission.  Any such copies, or
##   revisions thereof, must display this notice unaltered.
##   This code contains trade secrets of Real-Time Innovations, Inc.
##
##modification history:
##---------------------
##2.2.3,23sep15,djs created 
##========================================================================*/*#
${envMap.POUND_CHAR}include "${envMap.idlFileName}_subscriber.hpp"

void ${constructMap.nativeFQName}ReaderListener::on_data_available(
        dds::sub::DataReader<${constructMap.nativeFQName}>& reader)
{
    // Take all samples
    dds::sub::LoanedSamples<${constructMap.nativeFQName}> samples = reader.take();
    
    // Print samples with valid data
    for (const auto& sample : samples) {
        if (sample.info().valid()) {
             count_++;
             std::cout << sample.data() << std::endl; 
        }        
    }      
}

SubscriberApp::SubscriberApp()
    : reader(dds::core::null),
      listener_binder(dds::core::null)
{
}

void SubscriberApp::setup(int domain_id)
{
    // Create a DomainParticipant with default Qos
    dds::domain::DomainParticipant participant(domain_id);

    // Create a Topic -- and automatically register the type
    dds::topic::Topic<${constructMap.nativeFQName}> topic(
            participant, 
            "Example ${constructMap.nativeCFQName}");

    // Create a DataReader with default Qos
    reader = dds::sub::DataReader<${constructMap.nativeFQName}> (
            rti::sub::implicit_subscriber(participant),
            topic);
        
   // Set a listener and manage its lifecycle
   listener_binder = rti::core::bind_and_manage_listener(
	        reader,
	        new ${constructMap.nativeFQName}ReaderListener,
            dds::core::status::StatusMask::data_available());
}
