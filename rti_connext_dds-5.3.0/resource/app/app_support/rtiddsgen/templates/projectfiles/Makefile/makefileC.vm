## $Id$
##
## (c) Copyright, Real-Time Innovations, Inc. 2001.  All rights reserved.
## No duplications, whole or partial, manual or electronic, may be made
## without prior written permission.  Any such copies, or
## revisions thereof, must display this notice unaltered.
## This code contains trade secrets of Real-Time Innovations, Inc.
##
## modification history:
## ---------------------
## 2.3.x,17jun16,djs PLATFORMS-827 Add non-IDL functionality.
## 2.3,13may15,gpc Added setting of NDDSHOME if undefined in environment
## 2.2,9jun14,vmg created
##========================================================================
#[[######################################################################]]#
#[[#]]# makefile_#buildArchitectureMakefileName()
#[[#]]#
#[[#]]# (c) Copyright, Real-Time Innovations, 2012.  All rights reserved.
#[[#]]# No duplications, whole or partial, manual or electronic, may be made
#[[#]]# without express written permission.  Any such copies, or
#[[#]]# revisions thereof, must display this notice unaltered.
#[[#]]# This code contains trade secrets of Real-Time Innovations, Inc.
#[[#]]#
#[[#]]#
#[[#]]# This makefile was automatically generated by rtiddsgen.
#[[#]]#
#[[#]]# To compile, type:
#[[#]]#         gmake -f makefile_#buildArchitectureMakefileName()
#[[#]]#
#[[#]]# Note: This makefile is only meant to build our example applications and
#[[#]]#       may require alterations to build on your system.
#[[#]]#
#[[#]]# This makefile assumes that your build environment is already correctly
#[[#]]# configured. (For example, the correct version of your compiler and
#[[#]]# linker should be on your PATH.)
#[[######################################################################]]#

#if(!$global.noDefaultNddshome)
#[[#]]# If undefined in the environment default NDDSHOME to install dir
ifndef NDDSHOME
NDDSHOME := "${global.nddsHome}"
endif
#end

SOURCE_DIR = ${sourceDir}

TARGET_ARCH = ${global.architectureName}

#if (${archMap.TR_VAR})
${archMap.TR_VAR}
#end
#if (${archMap.CSR_VAR})
${archMap.CSR_VAR}
#end
#if (${archMap.COMP_PATH_VAR})
${archMap.COMP_PATH_VAR}

#end
ifndef COMPILER
COMPILER = ${compiler}
endif
COMPILER_FLAGS =#foreach($compilerFlag in ${compilerFlags}) -$compilerFlag#end

ifndef LINKER
LINKER = ${linker}
endif
LINKER_FLAGS =#foreach($linkerFlag in ${linkerFlags}) -$linkerFlag#end

SYSLIBS =#foreach($syslib in ${syslibs}) -$syslib#end

DEFINES =#foreach($define in ${defines}) -$define#end #foreach($define in ${additionalDefines}) -$define#end

ifndef DEBUG
#if(${global.libSuffix}=="d" || ${global.libSuffix}=="zd")
DEBUG=1
#else
DEBUG=0 
#end
endif
ifeq ($(DEBUG),1)
COMPILER_FLAGS += -g -O0
LINKER_FLAGS += -g
DEBUG_SFX = d
else
DEBUG_SFX = 
endif
 
ifndef SHAREDLIB
#if(${global.libSuffix}=="z" || ${global.libSuffix}=="zd")
SHAREDLIB=0
#else
SHAREDLIB=1
#end
endif

ifeq ($(SHAREDLIB),1)
SHAREDLIB_SFX = 
else
SHAREDLIB_SFX = z
DEFINES += -DRTI_STATIC
endif


#if($envPrefix)#[[#]]#export ENV_PREFIX = ${envPrefix}#end

INCLUDES = -I.#foreach($headersDirectory in ${headerDirectories}) -I$headersDirectory#end #if($includes.size()>0)\ #end

       #foreach($include in ${includes}) -I$include#end

LIBS = -L#[[$]]#(NDDSHOME)/lib/#[[$]]#(TARGET_ARCH) \
       #foreach($p in ${additionalLibraryPaths}) -L$p#end \
       #foreach($l in ${additionalRtiLibraries})-l${l}$(SHAREDLIB_SFX)$(DEBUG_SFX) #end \
       #foreach($coreLib in ${corelibs}) -l$coreLib$(SHAREDLIB_SFX)$(DEBUG_SFX)#end #[[$]]#(SYSLIBS) \
       #foreach($l in ${additionalLibraries}) -l${l}#end

#if(${global.idlFileName})
CDRSOURCES    = ${global.idlFileName}.idl
#end
SOURCES =#foreach($sharedSource in ${sharedSources}) #[[$]]#(SOURCE_DIR)$sharedSource#end#foreach($s in ${additionalSourceFiles}) #[[$]]#(SOURCE_DIR)$s#end

COMMONSOURCES = $(notdir $(SOURCES))

#if(${global.idlFileName})
EXEC          = ${global.idlFileName}_subscriber ${global.idlFileName}_publisher
#else 
EXEC          = ${global.execNames}
#end
DIRECTORIES   = objs.dir objs/$(TARGET_ARCH).dir
COMMONOBJS    = #[[$]]#(COMMONSOURCES:%${sourceFileExtension}=objs/#[[$]]#(TARGET_ARCH)/%.o)

#[[#]]# We actually stick the objects in a sub directory to keep your directory clean.
#[[$]]#(TARGET_ARCH) : #[[$]]#(DIRECTORIES) #[[$]]#(COMMONOBJS) \
	#[[$]]#(EXEC:%=objs/#[[$]]#(TARGET_ARCH)/%.o) \
	#[[$]]#(EXEC:%=objs/#[[$]]#(TARGET_ARCH)/%)

objs/#[[$]]#(TARGET_ARCH)/% : objs/#[[$]]#(TARGET_ARCH)/%.o
	#[[$]]#(LINKER) #[[$]]#(LINKER_FLAGS) ${compilerDebugFlag} ${linkerFlag} -o #[[$]]#@ #[[$]]#@.o #[[$]]#(COMMONOBJS) #[[$]]#(LIBS)

objs/#[[$]]#(TARGET_ARCH)/%.o : #[[$]]#(SOURCE_DIR)%${sourceFileExtension} #foreach($h in ${additionalHeaderFiles}) #[[$]]#(SOURCE_DIR)$h#end #if(${global.idlFileName}) #[[$]]#(SOURCE_DIR)${global.idlFileName}${headerFileExtension} #end
#*-- This intro is needed as the previous line ends with the end --*#
	#[[$]]#(COMPILER) #[[$]]#(COMPILER_FLAGS) ${compilerDebugFlag} -o #[[$]]#@ #[[$]]#(DEFINES) #[[$]]#(INCLUDES) -c #[[$]]#<

#if(${global.idlFileName})
#[[#]]#
#[[#]]# Uncomment these lines if you want the support files regenerated when idl
#[[#]]# file is modified
#[[#]]#
#[[#]]#
#[[#]]# #foreach($sharedSource in ${sharedSources}) $sharedSource#end \
#[[#]]# #foreach($sharedHeader in ${sharedHeaders}) $sharedHeader#end : \
#[[#]]#		${global.idlFileName}.idl
#[[#]]#	#[[$]]#(NDDSHOME)/bin/rtiddsgen ${global.idlFileName}.idl -replace -language ${global.language}
#[[#]]#
#end
#[[#]]# Here is how we create those subdirectories automatically.
%.dir : 
	@echo "Checking directory #[[$]]#*"
	@if [ ! -d #[[$]]#* ]; then \
		echo "Making directory #[[$]]#*"; \
		mkdir -p #[[$]]#* ; \
	fi;

#if($isAndroid)
#parse("projectfiles/Makefile/specificAndroid.vm")
#end
