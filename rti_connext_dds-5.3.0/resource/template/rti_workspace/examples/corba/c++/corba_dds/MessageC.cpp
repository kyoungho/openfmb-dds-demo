// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler v1.6a ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be/be_codegen.cpp:381


#include "MessageC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Var_Size_Argument_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "MessageC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:73

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:870

#if !defined (_MESSAGE__ARG_TRAITS_)
#define _MESSAGE__ARG_TRAITS_
  
  template<>
  class Arg_Traits<Message>
    : public
        Var_Size_Arg_Traits_T<
            Message,
            TAO::Any_Insert_Policy_Stream <Message>
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_DateTime[] =
      {
        { "year", &CORBA::_tc_long },
        { "month", &CORBA::_tc_long },
        { "day", &CORBA::_tc_long },
        { "hour", &CORBA::_tc_long },
        { "minute", &CORBA::_tc_long },
        { "second", &CORBA::_tc_long }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_DateTime (
  ::CORBA::tk_struct,
  "IDL:DateTime:1.0",
  "DateTime",
  _tao_fields_DateTime,
  6);

::CORBA::TypeCode_ptr const _tc_DateTime =
  &_tao_tc_DateTime;

// TAO_IDL - Generated from 
// be/be_visitor_structure/structure_cs.cpp:65

void 
DateTime::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  DateTime *_tao_tmp_pointer =
    static_cast<DateTime *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:50



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:611


#ifndef _TAO_TYPECODE_CORBA_STRING_255_GUARD
#define _TAO_TYPECODE_CORBA_STRING_255_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::String<TAO::Null_RefCount_Policy>
        CORBA_STRING_255 (
          ::CORBA::tk_string,
          255U);
        
      ::CORBA::TypeCode_ptr const tc_CORBA_STRING_255 =
        &CORBA_STRING_255;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_CORBA_STRING_255_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MessageText (
    ::CORBA::tk_alias,
    "IDL:MessageText:1.0",
    "MessageText",
    &TAO::TypeCode::tc_CORBA_STRING_255);
  
::CORBA::TypeCode_ptr const _tc_MessageText =
  &_tao_tc_MessageText;

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Message[] =
      {
        { "time", &_tc_DateTime },
        { "msg", &_tc_MessageText }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Message (
  ::CORBA::tk_struct,
  "IDL:Message:1.0",
  "Message",
  _tao_fields_Message,
  2);

::CORBA::TypeCode_ptr const _tc_Message =
  &_tao_tc_Message;

// TAO_IDL - Generated from 
// be/be_visitor_structure/structure_cs.cpp:65

void 
Message::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  Message *_tao_tmp_pointer =
    static_cast<Message *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for MessageReceiver.

MessageReceiver_ptr
TAO::Objref_Traits<MessageReceiver>::duplicate (
    MessageReceiver_ptr p)
{
  return MessageReceiver::_duplicate (p);
}

void
TAO::Objref_Traits<MessageReceiver>::release (
    MessageReceiver_ptr p)
{
  ::CORBA::release (p);
}

MessageReceiver_ptr
TAO::Objref_Traits<MessageReceiver>::nil (void)
{
  return MessageReceiver::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<MessageReceiver>::marshal (
    const MessageReceiver_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*_TAO_MessageReceiver_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:78

void MessageReceiver::sendMessage (
    const ::Message & msg)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_MessageReceiver_Proxy_Broker_ == 0)
    {
      MessageReceiver_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::Message>::in_arg_val _tao_msg (msg);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_msg
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "sendMessage",
      11,
      this->the_TAO_MessageReceiver_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

MessageReceiver::MessageReceiver (void)
 : the_TAO_MessageReceiver_Proxy_Broker_ (0)
{
  this->MessageReceiver_setup_collocation ();
}

void
MessageReceiver::MessageReceiver_setup_collocation ()
{
  if (::_TAO_MessageReceiver_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_MessageReceiver_Proxy_Broker_ =
        ::_TAO_MessageReceiver_Proxy_Broker_Factory_function_pointer (this);
    }
}

MessageReceiver::~MessageReceiver (void)
{}

void 
MessageReceiver::_tao_any_destructor (void *_tao_void_pointer)
{
  MessageReceiver *_tao_tmp_pointer =
    static_cast<MessageReceiver *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

MessageReceiver_ptr
MessageReceiver::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<MessageReceiver>::narrow (
        _tao_objref,
        "IDL:MessageReceiver:1.0",
        _TAO_MessageReceiver_Proxy_Broker_Factory_function_pointer
      );
}

MessageReceiver_ptr
MessageReceiver::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<MessageReceiver>::unchecked_narrow (
        _tao_objref,
        "IDL:MessageReceiver:1.0",
        _TAO_MessageReceiver_Proxy_Broker_Factory_function_pointer
      );
}

MessageReceiver_ptr
MessageReceiver::_duplicate (MessageReceiver_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
MessageReceiver::_tao_release (MessageReceiver_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
MessageReceiver::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:MessageReceiver:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* MessageReceiver::_interface_repository_id (void) const
{
  return "IDL:MessageReceiver:1.0";
}

::CORBA::Boolean
MessageReceiver::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_MessageReceiver (
    ::CORBA::tk_objref,
    "IDL:MessageReceiver:1.0",
    "MessageReceiver");
  
::CORBA::TypeCode_ptr const _tc_MessageReceiver =
  &_tao_tc_MessageReceiver;

// TAO_IDL - Generated from 
// be/be_visitor_structure/any_op_cs.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const DateTime &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<DateTime *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<DateTime>::insert_copy (
        _tao_any,
        DateTime::_tao_any_destructor,
        _tc_DateTime,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    DateTime *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<DateTime>::insert (
      _tao_any,
      DateTime::_tao_any_destructor,
      _tc_DateTime,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    DateTime *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const DateTime *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const DateTime *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<DateTime>::extract (
        _tao_any,
        DateTime::_tao_any_destructor,
        _tc_DateTime,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// be/be_visitor_structure/any_op_cs.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Message &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<Message *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<Message>::insert_copy (
        _tao_any,
        Message::_tao_any_destructor,
        _tc_Message,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Message *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<Message>::insert (
      _tao_any,
      Message::_tao_any_destructor,
      _tc_Message,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Message *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const Message *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Message *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Message>::extract (
        _tao_any,
        Message::_tao_any_destructor,
        _tc_Message,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<MessageReceiver>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    MessageReceiver_ptr _tao_elem)
{
  MessageReceiver_ptr _tao_objptr =
    MessageReceiver::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    MessageReceiver_ptr *_tao_elem)
{
  TAO::Any_Impl_T<MessageReceiver>::insert (
      _tao_any,
      MessageReceiver::_tao_any_destructor,
      _tc_MessageReceiver,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    MessageReceiver_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<MessageReceiver>::extract (
        _tao_any,
        MessageReceiver::_tao_any_destructor,
        _tc_MessageReceiver,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:61


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DateTime &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.year) &&
    (strm << _tao_aggregate.month) &&
    (strm << _tao_aggregate.day) &&
    (strm << _tao_aggregate.hour) &&
    (strm << _tao_aggregate.minute) &&
    (strm << _tao_aggregate.second);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DateTime &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.year) &&
    (strm >> _tao_aggregate.month) &&
    (strm >> _tao_aggregate.day) &&
    (strm >> _tao_aggregate.hour) &&
    (strm >> _tao_aggregate.minute) &&
    (strm >> _tao_aggregate.second);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:61


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Message &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.time) &&
    (strm << _tao_aggregate.msg.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Message &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.time) &&
    (strm >> _tao_aggregate.msg.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MessageReceiver_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MessageReceiver_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::MessageReceiver RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        _TAO_MessageReceiver_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



