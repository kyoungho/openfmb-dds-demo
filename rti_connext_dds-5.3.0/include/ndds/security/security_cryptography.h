/* (c) Copyright 2003-2015, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)security_cryptography.h    generated by: makeheader    Thu Jun 22 14:19:32 2017
 *
 *		built from:	cryptography.ifc
 */

#ifndef security_cryptography_h
#define security_cryptography_h



#ifndef security_dll_h
  #include "security/security_dll.h"
#endif
#ifndef dds_c_trustPlugins_h
  #include "dds_c/dds_c_trust_plugins.h"
#endif


#define DDS_SecureSubmessage_INVALID \
    DDS_TrustedSubmessage_INVALID
#define DDS_SecureSubmessage_INFO_SUBMESSAGE \
    DDS_TrustedSubmessage_INFO_SUBMESSAGE
#define DDS_SecureSubmessage_DATAWRITER_SUBMESSAGE \
    DDS_TrustedSubmessage_DATAWRITER_SUBMESSAGE
#define DDS_SecureSubmessage_DATAREADER_SUBMESSAGE \
    DDS_TrustedSubmessage_DATAREADER_SUBMESSAGE

typedef DDS_TrustedSubmessageCategory_t DDS_SecureSubmessageCategory_t;


#define RTI_SECURITY_CRYPTOGRAPHY_PROPERTY_PREFIX "cryptography."
#define RTI_SECURITY_MAX_BLOCKS_PER_SESSION_PROPERTY \
    RTI_SECURITY_CRYPTOGRAPHY_PROPERTY_PREFIX "max_blocks_per_session"
#define RTI_SECURITY_ENCRYPTION_ALGORITHM_PROPERTY \
    RTI_SECURITY_CRYPTOGRAPHY_PROPERTY_PREFIX "encryption_algorithm"
#define RTI_SECURITY_MAX_RECEIVER_SPECIFIC_MACS_PROPERTY \
    RTI_SECURITY_CRYPTOGRAPHY_PROPERTY_PREFIX "max_receiver_specific_macs"

/* HMAC-Only mode properties */
#define RTI_SECURITY_HMAC_ONLY_PROPERTY_PREFIX "hmac_only."
#define RTI_SECURITY_HMAC_ONLY_CRYPTOGRAPHY_PROPERTY_PREFIX \
    RTI_SECURITY_HMAC_ONLY_PROPERTY_PREFIX "cryptography."
#define RTI_SECURITY_HMAC_ONLY_KEY_PROPERTY \
    RTI_SECURITY_HMAC_ONLY_CRYPTOGRAPHY_PROPERTY_PREFIX "key"
#define RTI_SECURITY_HMAC_ONLY_MAX_BLOCKS_PER_SESSION_PROPERTY \
    RTI_SECURITY_CRYPTOGRAPHY_PROPERTY_PREFIX "max_blocks_per_session"
#define RTI_SECURITY_HMAC_ONLY_ENABLED_PROPERTY \
    RTI_SECURITY_HMAC_ONLY_PROPERTY_PREFIX "enabled"

/*
 * According do http://spark-university.s3.amazonaws.com/stanford-crypto/slides/
 * 04-using-block-v2-annotated.pdf slide 50, 2^64 should be a big enough
 * max_blocks_per_session for aes-128-ctr (and therefore gcm).
 */
#define RTI_SECURITY_MAX_BLOCKS_PER_SESSION_PROPERTY_DEFAULT 0xffffffffffffffff

#define RTI_SECURITY_GCM_SUFFIX "gcm"

/* key 16 bytes, IV 12 bytes */
#define RTI_SECURITY_AES_128_GCM_PROPERTY_VALUE "aes-128-" \
    RTI_SECURITY_GCM_SUFFIX
/* key 24 bytes, IV 12 bytes */
#define RTI_SECURITY_AES_192_GCM_PROPERTY_VALUE "aes-192-" \
    RTI_SECURITY_GCM_SUFFIX
/* key 32 bytes, IV 12 bytes */
#define RTI_SECURITY_AES_256_GCM_PROPERTY_VALUE "aes-256-" \
    RTI_SECURITY_GCM_SUFFIX

/* KxKey encryption algorithm fixed at aes-128-gcm. */
#define RTI_SECURITY_ENCRYPTION_ALGORITHM_PROPERTY_DEFAULT \
    RTI_SECURITY_AES_128_GCM_PROPERTY_VALUE

#define RTI_SECURITY_MAX_RECEIVER_SPECIFIC_MACS_PROPERTY_DEFAULT 0
#define RTI_SECURITY_MAX_RECEIVER_SPECIFIC_MACS_PROPERTY_MIN 0

/* 3275 = 65507 (UDPv4 message_size_max) / 20 (sizeof(ReceiverSpecificMAC)). */
#define RTI_SECURITY_MAX_RECEIVER_SPECIFIC_MACS_PROPERTY_MAX 3275

/*
 * according to https://wiki.openssl.org/index.php/EVP_Authenticated_
 * Encryption_and_Decryption
 */
#define RTI_SECURITY_AES_GCM_TAG_LENGTH 16

#endif /* security_cryptography_h */
